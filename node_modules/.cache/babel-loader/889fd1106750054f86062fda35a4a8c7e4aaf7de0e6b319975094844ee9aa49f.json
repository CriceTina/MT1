{"ast":null,"code":"// 假设登录状态存储在localStorage中\nconst isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n\n// 检查用户是否已登录\nfunction checkLoginStatus() {\n  if (!isLoggedIn) {\n    // 如果用户未登录，则重定向到登录页面\n    window.location.href = '/login';\n  }\n}\n\n// 在需要登录拦截的页面加载时调用checkLoginStatus\ndocument.addEventListener('DOMContentLoaded', function () {\n  checkLoginStatus();\n});\n\n// 登录表单提交事件处理\ndocument.querySelector('form').addEventListener('submit', function (event) {\n  event.preventDefault(); // 阻止表单默认提交行为\n\n  const username = document.getElementById('username').value;\n  const password = document.getElementById('password').value;\n  fetch('/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    body: `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`\n  }).then(response => response.json()).then(data => {\n    if (data.status === 'success') {\n      // 登录成功，更新登录状态并跳转到管理系统页面\n      localStorage.setItem('isLoggedIn', 'true');\n      window.location.href = '/admin';\n    } else {\n      // 登录失败，显示错误信息\n      alert(data.message);\n    }\n  }).catch(error => {\n    console.error('登录请求失败:', error);\n    alert('登录请求失败，请稍后再试');\n  });\n});\nexport default {\n  name: 'Login',\n  data() {\n    return {\n      loginForm: {\n        username: '',\n        password: ''\n      }\n    };\n  },\n  methods: {\n    handleLogin() {\n      // 在这里处理登录逻辑，例如发送请求到后端验证用户名和密码\n\n      console.log('登录信息', this.loginForm);\n      // 这里可以添加验证成功后跳转到管理系统的逻辑\n    }\n  }\n};","map":{"version":3,"names":["isLoggedIn","localStorage","getItem","checkLoginStatus","window","location","href","document","addEventListener","querySelector","event","preventDefault","username","getElementById","value","password","fetch","method","headers","body","encodeURIComponent","then","response","json","data","status","setItem","alert","message","catch","error","console","name","loginForm","methods","handleLogin","log"],"sources":["src/views/LoginView.vue"],"sourcesContent":["<template>\r\n    <div class=\"login-container\">\r\n      <div class=\"login-form\">\r\n        <h2>管理员登录</h2>\r\n        <form @submit.prevent=\"handleLogin\">\r\n          <div class=\"form-group\">\r\n            <label for=\"username\">用户名：</label>\r\n            <input type=\"text\" id=\"username\" v-model=\"loginForm.username\" placeholder=\"请输入用户名\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">密码：</label>\r\n            <input type=\"password\" id=\"password\" v-model=\"loginForm.password\" placeholder=\"请输入密码\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <button type=\"submit\">登录</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  // 假设登录状态存储在localStorage中\r\nconst isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\r\n\r\n// 检查用户是否已登录\r\nfunction checkLoginStatus() {\r\n    if (!isLoggedIn) {\r\n        // 如果用户未登录，则重定向到登录页面\r\n        window.location.href = '/login';\r\n    }\r\n}\r\n\r\n// 在需要登录拦截的页面加载时调用checkLoginStatus\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    checkLoginStatus();\r\n});\r\n\r\n// 登录表单提交事件处理\r\ndocument.querySelector('form').addEventListener('submit', function(event) {\r\n    event.preventDefault(); // 阻止表单默认提交行为\r\n\r\n    const username = document.getElementById('username').value;\r\n    const password = document.getElementById('password').value;\r\n\r\n    fetch('/login', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        if (data.status === 'success') {\r\n            // 登录成功，更新登录状态并跳转到管理系统页面\r\n            localStorage.setItem('isLoggedIn', 'true');\r\n            window.location.href = '/admin';\r\n        } else {\r\n            // 登录失败，显示错误信息\r\n            alert(data.message);\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('登录请求失败:', error);\r\n        alert('登录请求失败，请稍后再试');\r\n    });\r\n});\r\n  export default {\r\n    name: 'Login',\r\n    data() {\r\n      return {\r\n        loginForm: {\r\n          username: '',\r\n          password: ''\r\n        }\r\n      };\r\n    },\r\n    methods: {\r\n      handleLogin() {\r\n        // 在这里处理登录逻辑，例如发送请求到后端验证用户名和密码\r\n\r\n        console.log('登录信息', this.loginForm);\r\n        // 这里可以添加验证成功后跳转到管理系统的逻辑\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .login-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n  }\r\n  \r\n  .login-form {\r\n    width: 300px;\r\n    padding: 20px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  .form-group {\r\n    margin-bottom: 15px;\r\n  }\r\n  \r\n  label {\r\n    display: block;\r\n    margin-bottom: 5px;\r\n  }\r\n  \r\n  input[type=\"text\"],\r\n  input[type=\"password\"] {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n  }\r\n  \r\n  button {\r\n    width: 100%;\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAsBA;AACA,MAAAA,UAAA,GAAAC,YAAA,CAAAC,OAAA;;AAEA;AACA,SAAAC,iBAAA;EACA,KAAAH,UAAA;IACA;IACAI,MAAA,CAAAC,QAAA,CAAAC,IAAA;EACA;AACA;;AAEA;AACAC,QAAA,CAAAC,gBAAA;EACAL,gBAAA;AACA;;AAEA;AACAI,QAAA,CAAAE,aAAA,SAAAD,gBAAA,qBAAAE,KAAA;EACAA,KAAA,CAAAC,cAAA;;EAEA,MAAAC,QAAA,GAAAL,QAAA,CAAAM,cAAA,aAAAC,KAAA;EACA,MAAAC,QAAA,GAAAR,QAAA,CAAAM,cAAA,aAAAC,KAAA;EAEAE,KAAA;IACAC,MAAA;IACAC,OAAA;MACA;IACA;IACAC,IAAA,cAAAC,kBAAA,CAAAR,QAAA,cAAAQ,kBAAA,CAAAL,QAAA;EACA,GACAM,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAAG,IAAA;IACA,IAAAA,IAAA,CAAAC,MAAA;MACA;MACAxB,YAAA,CAAAyB,OAAA;MACAtB,MAAA,CAAAC,QAAA,CAAAC,IAAA;IACA;MACA;MACAqB,KAAA,CAAAH,IAAA,CAAAI,OAAA;IACA;EACA,GACAC,KAAA,CAAAC,KAAA;IACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;IACAH,KAAA;EACA;AACA;AACA;EACAK,IAAA;EACAR,KAAA;IACA;MACAS,SAAA;QACArB,QAAA;QACAG,QAAA;MACA;IACA;EACA;EACAmB,OAAA;IACAC,YAAA;MACA;;MAEAJ,OAAA,CAAAK,GAAA,cAAAH,SAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}